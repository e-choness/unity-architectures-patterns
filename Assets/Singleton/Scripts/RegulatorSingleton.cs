using UnityEngine;

namespace Singleton.Scripts
{
    public class RegulatorSingleton<T> : MonoBehaviour where T : Component
    {
        protected static T _instance;
        public static bool HasInstance => _instance!=null;
        public float InitializationTime { get; private set; }

        public static T Instance
        {
            get
            {
                if (!HasInstance)
                {
                    _instance = FindAnyObjectByType<T>();
                    if (!HasInstance)
                    {
                        var gameObj = new GameObject(typeof(T).Name + "AutoGenerated");
                        gameObj.hideFlags = HideFlags.HideAndDontSave;
                        _instance = gameObj.AddComponent<T>();
                    }
                }
                return _instance;
            }
        }

        protected virtual void Awake() => InitializeSingleton();

        protected virtual void InitializeSingleton()
        {
            if (!Application.isPlaying) return;
            InitializationTime = Time.time;
            DontDestroyOnLoad(gameObject);

            var oldInstances = FindObjectsByType<T>(FindObjectsSortMode.None);
            foreach (var instance in oldInstances)
            {
                if (instance.GetComponent<RegulatorSingleton<T>>().InitializationTime < InitializationTime)
                {
                    Destroy(instance.gameObject);
                }
            }
            
            if(!HasInstance)
            {
                _instance = this as T;
                
            }
        }
    }
}
