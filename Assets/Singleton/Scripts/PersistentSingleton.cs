using UnityEngine;

namespace Singleton.Scripts
{
    public class PersistentSingleton<T> : MonoBehaviour where T : Component
    {
        [SerializeField] private bool autoUnparent = true;
        protected static T _instance;
        public static bool HasInstance => _instance!=null;
        public static T TryGetInstance() => HasInstance ? _instance : null;

        public static T Instance
        {
            get
            {
                if (!HasInstance)
                {
                    _instance = FindAnyObjectByType<T>();
                    if (!HasInstance)
                    {
                        var gameObj = new GameObject(typeof(T).Name + "AutoGenerated");
                        _instance = gameObj.AddComponent<T>();
                    }
                }
                return _instance;
            }
        }

        protected virtual void Awake() => InitializeSingleton();

        protected virtual void InitializeSingleton()
        {
            if (!Application.isPlaying) return;
            
            if(autoUnparent) transform.SetParent(null);
            
            if(!HasInstance)
            {
                _instance = this as T;
                DontDestroyOnLoad(gameObject);
            }
            else
            {
                Destroy(gameObject);
            }
        }
    }
}
